{"ast":null,"code":"var _jsxFileName = \"D:\\\\LaiOffer\\\\TravelPlannerFE\\\\src\\\\SharedComponents\\\\RouteDrawer.js\";\nimport React from 'react';\nimport { DirectionsService } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DirectionsRenderer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      places,\n      travelMode\n    } = this.props; // const waypoints = places.map(p =>({\n    //     location: {lat: p.latitude, lng:p.longitude},\n    //     stopover: true\n    // }))\n\n    const waypoints = places;\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n    const directionsService = new DirectionsService();\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: travelMode,\n      waypoints: waypoints\n    }, (result, status) => {\n      if (status === DirectionsService.DirectionsStatus.OK) {\n        this.setState({\n          directions: result\n        });\n      } else {\n        this.setState({\n          error: result\n        });\n      }\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n      directions: this.state.directions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default DirectionsRenderer;","map":{"version":3,"sources":["D:/LaiOffer/TravelPlannerFE/src/SharedComponents/RouteDrawer.js"],"names":["React","DirectionsService","DirectionsRenderer","Component","state","directions","error","componentDidMount","places","travelMode","props","waypoints","origin","shift","location","destination","pop","directionsService","route","result","status","DirectionsStatus","OK","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,wBAAlC;;;AAEA,MAAMC,kBAAN,SAAiCF,KAAK,CAACG,SAAvC,CAAiD;AAAA;AAAA;AAAA,SAC/CC,KAD+C,GACvC;AACNC,MAAAA,UAAU,EAAE,IADN;AAENC,MAAAA,KAAK,EAAE;AAFD,KADuC;AAAA;;AAM/CC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAyB,KAAKC,KAApC,CADkB,CAGlB;AACA;AACA;AACA;;AACA,UAAMC,SAAS,GAAGH,MAAlB;AACA,UAAMI,MAAM,GAAGD,SAAS,CAACE,KAAV,GAAkBC,QAAjC;AACA,UAAMC,WAAW,GAAGJ,SAAS,CAACK,GAAV,GAAgBF,QAApC;AAEA,UAAMG,iBAAiB,GAAG,IAAIhB,iBAAJ,EAA1B;AACAgB,IAAAA,iBAAiB,CAACC,KAAlB,CACE;AACEN,MAAAA,MAAM,EAAEA,MADV;AAEEG,MAAAA,WAAW,EAAEA,WAFf;AAGEN,MAAAA,UAAU,EAAEA,UAHd;AAIEE,MAAAA,SAAS,EAAEA;AAJb,KADF,EAOE,CAACQ,MAAD,EAASC,MAAT,KAAoB;AAClB,UAAIA,MAAM,KAAKnB,iBAAiB,CAACoB,gBAAlB,CAAmCC,EAAlD,EAAsD;AACpD,aAAKC,QAAL,CAAc;AACZlB,UAAAA,UAAU,EAAEc;AADA,SAAd;AAGD,OAJD,MAIO;AACL,aAAKI,QAAL,CAAc;AAAEjB,UAAAA,KAAK,EAAEa;AAAT,SAAd;AACD;AACF,KAfH;AAiBD;;AAEDK,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKpB,KAAL,CAAWE,KAAf,EAAsB;AACpB,0BAAO;AAAA,kBAAK,KAAKF,KAAL,CAAWE;AAAhB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,wBAAO,QAAC,kBAAD;AAAoB,MAAA,UAAU,EAAE,KAAKF,KAAL,CAAWC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA1C8C;;AA6CjD,eAAeH,kBAAf","sourcesContent":["import React from 'react';\r\nimport { DirectionsService } from '@react-google-maps/api';\r\n\r\nclass DirectionsRenderer extends React.Component {\r\n  state = {\r\n    directions: null,\r\n    error: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { places, travelMode } = this.props;\r\n\r\n    // const waypoints = places.map(p =>({\r\n    //     location: {lat: p.latitude, lng:p.longitude},\r\n    //     stopover: true\r\n    // }))\r\n    const waypoints = places\r\n    const origin = waypoints.shift().location;\r\n    const destination = waypoints.pop().location;\r\n\r\n    const directionsService = new DirectionsService();\r\n    directionsService.route(\r\n      {\r\n        origin: origin,\r\n        destination: destination,\r\n        travelMode: travelMode,\r\n        waypoints: waypoints\r\n      },\r\n      (result, status) => {\r\n        if (status === DirectionsService.DirectionsStatus.OK) {\r\n          this.setState({\r\n            directions: result\r\n          });\r\n        } else {\r\n          this.setState({ error: result });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <h1>{this.state.error}</h1>;\r\n    }\r\n    return <DirectionsRenderer directions={this.state.directions} />;\r\n  }\r\n}\r\n\r\nexport default DirectionsRenderer"]},"metadata":{},"sourceType":"module"}