{"ast":null,"code":"var _jsxFileName = \"D:\\\\LaiOffer\\\\TravelPlannerFE\\\\src\\\\SharedComponents\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, DirectionsService, DirectionsRenderer } from \"@react-google-maps/api\";\nimport * as POIData from \"./POI-data-test.json\";\nimport mapStyles from \"../styles/mapStyles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '87.2vh'\n};\nconst imageStyle = {\n  alt: \"img\",\n  float: 'left',\n  width: 100\n}; // const textStyle = {\n//     textalign: 'left'\n// }\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst center = {\n  lat: 40.748440,\n  lng: -73.985664\n};\n\nfunction Map() {\n  _s();\n\n  const [selectedPOI, setSelectedPOI] = useState(null);\n  const [travelMode, setTravelMode] = React.useState('DRIVING');\n  const [origin, setOrigin] = React.useState('');\n  const [destination, setDestination] = React.useState('');\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLEMAP_API,\n    libraries\n  });\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(14);\n  }, []);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  const directionsCallback = React.useCallback(res => {\n    console.log(res);\n\n    if (res !== null) {\n      if (res.status === 'OK') {\n        setResponse(res);\n      } else {\n        console.log('response: ', res);\n      }\n    }\n  }, []);\n  const directionsServiceOptions = React.useMemo(() => {\n    return {\n      destination: destination,\n      origin: origin,\n      travelMode: travelMode\n    };\n  }, []);\n  const directionsRendererOptions = React.useMemo(() => {\n    return {\n      directions: response\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap // id=\"map\"\n    , {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 10,\n      center: center,\n      options: options // onClick={onMapClick}\n      // onLoad={onMapLoad}\n      ,\n      children: [POIData.features.map(POI => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: POI.geometry.coordinates[1],\n          lng: POI.geometry.coordinates[0]\n        },\n        onClick: () => {\n          setSelectedPOI(POI);\n        } // icon = {{\n        //     url: \" \",\n        //     scaledSize: new window.google.maps.Size(25, 25)\n        // }}\n\n      }, POI.properties.poiid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)), selectedPOI && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selectedPOI.geometry.coordinates[1],\n          lng: selectedPOI.geometry.coordinates[0]\n        },\n        onCloseClick: () => {\n          setSelectedPOI(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: selectedPOI.properties.imageUrl,\n              style: imageStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: selectedPOI.properties.NAME\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this), \"Address: \", selectedPOI.properties.ADDRESS, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this), \"Description: \", selectedPOI.properties.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), destination !== '' && origin !== '' && /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: directionsServiceOptions,\n        callback: directionsCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this), response !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        options: directionsRendererOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Map, \"ZCpwCx0dgsFggWuWlKeUXRDERNo=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/LaiOffer/TravelPlannerFE/src/SharedComponents/Map.js"],"names":["React","useState","GoogleMap","useLoadScript","Marker","InfoWindow","DirectionsService","DirectionsRenderer","POIData","mapStyles","libraries","mapContainerStyle","width","height","imageStyle","alt","float","options","styles","disableDefaultUI","zoomControl","center","lat","lng","Map","selectedPOI","setSelectedPOI","travelMode","setTravelMode","origin","setOrigin","destination","setDestination","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLEMAP_API","mapRef","useRef","onMapLoad","useCallback","map","current","panTo","setZoom","directionsCallback","res","console","log","status","setResponse","directionsServiceOptions","useMemo","directionsRendererOptions","directions","response","features","POI","geometry","coordinates","properties","poiid","imageUrl","NAME","ADDRESS","description"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {GoogleMap, useLoadScript, Marker, InfoWindow, DirectionsService, DirectionsRenderer} from \"@react-google-maps/api\";\r\nimport * as POIData from \"./POI-data-test.json\";\r\nimport mapStyles from \"../styles/mapStyles\";\r\n\r\nconst libraries = [\"places\"];\r\nconst mapContainerStyle = {\r\n    width: '100vw',\r\n    height: '87.2vh',\r\n};\r\n\r\nconst imageStyle = {\r\n    alt: \"img\",\r\n    float: 'left',\r\n    width: 100\r\n}\r\n\r\n// const textStyle = {\r\n//     textalign: 'left'\r\n// }\r\nconst options = {\r\n    styles: mapStyles,\r\n    disableDefaultUI: true,\r\n    zoomControl: true,\r\n};\r\nconst center = {\r\n    lat: 40.748440,\r\n    lng: -73.985664,\r\n};\r\n\r\nfunction Map() {\r\n    const[selectedPOI, setSelectedPOI] = useState(null);\r\n    const [travelMode, setTravelMode] = React.useState('DRIVING')\r\n    const [origin, setOrigin] = React.useState('')\r\n    const [destination, setDestination] = React.useState('')\r\n\r\n    const {isLoaded, loadError} = useLoadScript({\r\n        googleMapsApiKey: process.env.REACT_APP_GOOGLEMAP_API,\r\n        libraries,\r\n    });\r\n\r\n    const mapRef = React.useRef();\r\n    const onMapLoad = React.useCallback((map) => {\r\n        mapRef.current = map;\r\n    }, [])\r\n\r\n    const panTo = React.useCallback(({lat, lng}) => {\r\n        mapRef.current.panTo({lat, lng});\r\n        mapRef.current.setZoom(14);\r\n    }, [])\r\n    \r\n    if (loadError) return \"Error\";\r\n    if (!isLoaded) return \"Loading...\";\r\n\r\n    const directionsCallback = React.useCallback((res) => {\r\n        console.log(res)\r\n    \r\n        if (res !== null) {\r\n          if (res.status === 'OK') {\r\n            setResponse(res)\r\n          } else {\r\n            console.log('response: ', res)\r\n          }\r\n        }\r\n      }, [])\r\n\r\n    const directionsServiceOptions = React.useMemo(() => {\r\n        return {\r\n          destination: destination,\r\n          origin: origin,\r\n          travelMode: travelMode,\r\n        }\r\n      }, [])\r\n    \r\n      const directionsRendererOptions = React.useMemo(() => {\r\n        return {\r\n          directions: response,\r\n        }\r\n      }, [])\r\n\r\n    return (\r\n        \r\n        <div>\r\n            <GoogleMap\r\n                // id=\"map\"\r\n                mapContainerStyle={mapContainerStyle}\r\n                zoom={10}\r\n                center={center}\r\n                options={options}\r\n                // onClick={onMapClick}\r\n                // onLoad={onMapLoad}\r\n            >\r\n                {POIData.features.map(POI => (\r\n                    <Marker\r\n                        key = {POI.properties.poiid}\r\n                        position = {{\r\n                            lat: POI.geometry.coordinates[1],\r\n                            lng: POI.geometry.coordinates[0]\r\n                        }}\r\n                        onClick = {() => {\r\n                            setSelectedPOI(POI);\r\n                        }}\r\n                        // icon = {{\r\n                        //     url: \" \",\r\n                        //     scaledSize: new window.google.maps.Size(25, 25)\r\n                        // }}\r\n                    />\r\n                ))}\r\n\r\n                {selectedPOI && (\r\n                    <InfoWindow\r\n                        position = {{\r\n                            lat: selectedPOI.geometry.coordinates[1],\r\n                            lng: selectedPOI.geometry.coordinates[0]\r\n                        }}\r\n                        onCloseClick = {() => {\r\n                            setSelectedPOI(null);\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            <div >\r\n                                <img \r\n                                    src={selectedPOI.properties.imageUrl}\r\n                                    style = {imageStyle}\r\n                                />\r\n                            </div>\r\n                            <div >\r\n                                <b>{selectedPOI.properties.NAME}</b>\r\n                                <br/>\r\n                                Address: {selectedPOI.properties.ADDRESS}\r\n                                <br/>\r\n                                Description: {selectedPOI.properties.description}\r\n                            </div>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                {destination !== '' && origin !== '' && (\r\n                    <DirectionsService\r\n                    options={directionsServiceOptions}\r\n                    callback={directionsCallback}\r\n                    />\r\n                )}\r\n\r\n                {response !== null && (\r\n                    <DirectionsRenderer options={directionsRendererOptions} />\r\n                )}\r\n            </GoogleMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n"]},"metadata":{},"sourceType":"module"}