{"ast":null,"code":"var _jsxFileName = \"D:\\\\LaiOffer\\\\TravelPlannerFE\\\\src\\\\SharedComponents\\\\RouteDrawer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, google } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst places = [{\n  latitude: 40.748440,\n  longitude: -73.985664\n}, {\n  latitude: 45.748440,\n  longitude: -70.985664\n}, {\n  latitude: 35.748440,\n  longitude: -75.985664\n} //...\n];\n\nfunction DirectionsRenderer(props) {\n  _s();\n\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const {\n      places,\n      travelMode\n    } = props;\n    const waypoints = places.map(p => ({\n      location: {\n        lat: p.latitude,\n        lng: p.longitude\n      },\n      stopover: true\n    }));\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n    const directionsService = new google.maps.DirectionsService();\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: travelMode,\n      waypoints: waypoints\n    }, (result, status) => {\n      console.log(result);\n\n      if (status === google.maps.DirectionsStatus.OK) {\n        setDirections(result);\n      } else {\n        setError(result);\n      }\n    });\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  return directions && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n    places: places,\n    mode: 'walk'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n}\n\n_s(DirectionsRenderer, \"EbZ3rf2k47q8bOIBnVG92TiLXsw=\");\n\n_c = DirectionsRenderer;\nexport default DirectionsRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DirectionsRenderer\");","map":{"version":3,"sources":["D:/LaiOffer/TravelPlannerFE/src/SharedComponents/RouteDrawer.js"],"names":["useState","useEffect","google","places","latitude","longitude","DirectionsRenderer","props","directions","setDirections","error","setError","travelMode","waypoints","map","p","location","lat","lng","stopover","origin","shift","destination","pop","directionsService","maps","DirectionsService","route","result","status","console","log","DirectionsStatus","OK"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA0C,OAA1C;;AAEA,MAAMC,MAAM,GAAG,CACb;AAACC,EAAAA,QAAQ,EAAE,SAAX;AAAqBC,EAAAA,SAAS,EAAE,CAAC;AAAjC,CADa,EAEb;AAACD,EAAAA,QAAQ,EAAE,SAAX;AAAqBC,EAAAA,SAAS,EAAE,CAAC;AAAjC,CAFa,EAGb;AAACD,EAAAA,QAAQ,EAAE,SAAX;AAAqBC,EAAAA,SAAS,EAAE,CAAC;AAAjC,CAHa,CAIb;AAJa,CAAf;;AAOA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA;;AACjC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEE,MAAAA,MAAF;AAAUS,MAAAA;AAAV,QAAyBL,KAA/B;AAEA,UAAMM,SAAS,GAAGV,MAAM,CAACW,GAAP,CAAWC,CAAC,KAAK;AACjCC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEF,CAAC,CAACX,QAAT;AAAmBc,QAAAA,GAAG,EAAEH,CAAC,CAACV;AAA1B,OADuB;AAEjCc,MAAAA,QAAQ,EAAE;AAFuB,KAAL,CAAZ,CAAlB;AAIA,UAAMC,MAAM,GAAGP,SAAS,CAACQ,KAAV,GAAkBL,QAAjC;AACA,UAAMM,WAAW,GAAGT,SAAS,CAACU,GAAV,GAAgBP,QAApC;AAEA,UAAMQ,iBAAiB,GAAG,IAAItB,MAAM,CAACuB,IAAP,CAAYC,iBAAhB,EAA1B;AACAF,IAAAA,iBAAiB,CAACG,KAAlB,CACE;AACEP,MAAAA,MAAM,EAAEA,MADV;AAEEE,MAAAA,WAAW,EAAEA,WAFf;AAGEV,MAAAA,UAAU,EAAEA,UAHd;AAIEC,MAAAA,SAAS,EAAEA;AAJb,KADF,EAOE,CAACe,MAAD,EAASC,MAAT,KAAoB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;;AACA,UAAIC,MAAM,KAAK3B,MAAM,CAACuB,IAAP,CAAYO,gBAAZ,CAA6BC,EAA5C,EAAgD;AAC9CxB,QAAAA,aAAa,CAACmB,MAAD,CAAb;AACD,OAFD,MAEO;AACLjB,QAAAA,QAAQ,CAACiB,MAAD,CAAR;AACD;AACF,KAdH;AAgBD,GA3BQ,CAAT;;AA6BA,MAAIlB,KAAJ,EAAW;AACT,wBAAO;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,SACEF,UAAU,iBACR,QAAC,kBAAD;AAAoB,IAAA,MAAM,EAAEL,MAA5B;AAAoC,IAAA,IAAI,EAAE;AAA1C;AAAA;AAAA;AAAA;AAAA,UAFJ;AAKD;;GAzCQG,kB;;KAAAA,kB;AA2CT,eAAeA,kBAAf","sourcesContent":["import {useState, useEffect, google} from 'react'\r\n\r\nconst places = [\r\n  {latitude: 40.748440,longitude: -73.985664},\r\n  {latitude: 45.748440,longitude: -70.985664},\r\n  {latitude: 35.748440,longitude: -75.985664},\r\n  //...\r\n]\r\n\r\nfunction DirectionsRenderer(props) {\r\n  const [directions, setDirections] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { places, travelMode } = props;\r\n\r\n    const waypoints = places.map(p => ({\r\n      location: { lat: p.latitude, lng: p.longitude },\r\n      stopover: true\r\n    }));\r\n    const origin = waypoints.shift().location;\r\n    const destination = waypoints.pop().location;\r\n\r\n    const directionsService = new google.maps.DirectionsService();\r\n    directionsService.route(\r\n      {\r\n        origin: origin,\r\n        destination: destination,\r\n        travelMode: travelMode,\r\n        waypoints: waypoints\r\n      },\r\n      (result, status) => {\r\n        console.log(result)\r\n        if (status === google.maps.DirectionsStatus.OK) {\r\n          setDirections(result);\r\n        } else {\r\n          setError(result);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\n  if (error) {\r\n    return <h1>{error}</h1>;\r\n  }\r\n  return (\r\n    directions && (\r\n      <DirectionsRenderer places={places} mode={'walk'}/>\r\n    )\r\n  );\r\n}\r\n\r\nexport default DirectionsRenderer"]},"metadata":{},"sourceType":"module"}