{"ast":null,"code":"var _jsxFileName = \"D:\\\\LaiOffer\\\\TravelPlannerFE\\\\src\\\\SharedComponents\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, DirectionsService, DirectionsRenderer } from \"@react-google-maps/api\";\nimport * as POIData from \"./POI-data-test.json\";\nimport mapStyles from \"../styles/mapStyles\";\nimport PropTypes from 'prop-types';\nimport { searchByRange } from '../Utils/searchUtils';\nimport \"../styles/Map.css\";\nimport { Button, Image, Card, message } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  // overflow: \"hidden !important\" ,\n  // lineHeight: 1.35,\n  // whiteSpace: \"nowrap\",\n  width: '100vw',\n  height: '100%'\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst DirectionsPropTypes = {\n  styles: PropTypes.shape({\n    container: PropTypes.object.isRequired\n  }).isRequired\n};\n\nfunction Map({\n  initCenter,\n  searchData,\n  pickedPOI,\n  routePoints\n}) {\n  _s();\n\n  const mapRef = React.useRef();\n  const [selectedPOI, setSelectedPOI] = useState(null);\n  const [center, setCenter] = useState();\n  const [showNearBy, setShowNearBy] = useState(true);\n  const [POIData, setPOIData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLEMAP_API,\n    libraries\n  });\n  const [response, setResponse] = useState(null);\n  const [directionReq, setDirectionReq] = useState(null);\n\n  function handleLoad(map) {\n    mapRef.current = map;\n  }\n\n  function handleBoundsChanged() {\n    if (!mapRef.current) return; //const newPos = mapRef.current.getCenter().toJSON();\n    // setPosition(newPos);\n    // setCenter(newPos);\n    //console.log(newPos)\n    // if(searchData.length !== 0) {\n    //     setPOIData(searchData);\n    // } else {     \n    //  if (showNearBy)       \n    //      getNearbyPOIs();\n    //}\n  }\n\n  useEffect(() => {\n    if (!center) {\n      setCenter(initCenter);\n    }\n  });\n  /* if picked POI is updated from search results or route drawer\r\n  Centerize that POI and show details\r\n  */\n\n  useEffect(() => {\n    if (pickedPOI) {\n      onSelectPOI(pickedPOI);\n    }\n  }, [pickedPOI]);\n  /* if route points is passed in, generate and show route */\n\n  useEffect(() => {\n    if (routePoints) {\n      onGenerateRoute(routePoints);\n    }\n  }, [routePoints]);\n\n  const onSelectPOI = poi => {\n    setSelectedPOI(poi);\n    setCenter({\n      lat: poi.lat,\n      lng: poi.lng\n    });\n  };\n\n  const onGenerateRoute = routePoints => {\n    const directReq = {\n      origin: routePoints.startAddress,\n      destination: routePoints.endAddress,\n      travelMode: \"DRIVING\"\n    };\n    const waypoints = [];\n    routePoints.poiList.forEach(poi => {\n      waypoints.push({\n        location: {\n          lat: poi.lat,\n          lng: poi.lng\n        },\n        stopover: true\n      });\n    });\n    directReq.waypoints = waypoints;\n    setDirectionReq(directReq);\n  };\n\n  useEffect(() => {\n    if (searchData.length !== 0) {\n      setPOIData(searchData);\n      setShowNearBy(false);\n    } else {\n      setShowNearBy(true);\n      getNearbyPOIs();\n    }\n\n    console.log(\"search data changed\");\n  }, [searchData]);\n\n  const getNearbyPOIs = () => {\n    if (!mapRef.current) return;\n    const ne = mapRef.current.getBounds().getNorthEast().toJSON();\n    const c = mapRef.current.getCenter().toJSON();\n    const radius = haversine_distance(c, ne);\n    searchByRange(c.lat, c.lng, radius).then(data => {\n      setPOIData(data);\n    }).catch(err => {\n      message.error(err.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  function haversine_distance(p1, p2) {\n    var R = 6371; // Radius of the Earth in kms\n\n    var rlat1 = p1.lat * (Math.PI / 180); // Convert degrees to radians\n\n    var rlat2 = p2.lat * (Math.PI / 180); // Convert degrees to radians\n\n    var difflat = rlat2 - rlat1; // Radian difference (latitudes)\n\n    var difflon = (p2.lng - p1.lng) * (Math.PI / 180); // Radian difference (longitudes)\n\n    var d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n    return d;\n  }\n\n  const directionsCallback = React.useCallback(res => {\n    console.log(res);\n\n    if (res !== null) {\n      if (res.status === 'OK') {\n        setResponse(res);\n      } else {\n        console.log('response: ', res);\n      }\n    }\n  }, []);\n  let directionsRendererOptions = {\n    directions: response\n  };\n\n  const onAddPOItoRoute = poi => {\n    console.log(\"onAddPOItoRoute\");\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"inherit\"\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      onBoundsChanged: handleBoundsChanged,\n      zoom: 13,\n      center: center,\n      options: options,\n      onLoad: handleLoad,\n      onTilesLoaded: () => {\n        if (showNearBy) getNearbyPOIs();\n      },\n      children: [POIData.map(POI => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: POI.lat,\n          lng: POI.lng\n        },\n        onClick: () => {\n          onSelectPOI(POI);\n        },\n        icon: {\n          url: POI.imageUrl,\n          scaledSize: new window.google.maps.Size(50, 50)\n        }\n      }, POI.poiId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this)), selectedPOI && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selectedPOI.lat,\n          lng: selectedPOI.lng\n        },\n        onCloseClick: () => {\n          setSelectedPOI(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-window\",\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: selectedPOI.imageUrl,\n            alt: selectedPOI.name,\n            className: \"info-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-button\",\n            children: [/*#__PURE__*/_jsxDEV(Card, {\n              title: selectedPOI.name,\n              bodyStyle: {\n                paddingTop: 0,\n                paddingBottom: 0\n              },\n              children: selectedPOI.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              onClick: () => onAddPOItoRoute(selectedPOI),\n              children: \"Add to Trip\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }, this), directionReq && /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: directionReq,\n        callback: directionsCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this), response !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        options: directionsRendererOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Map, \"kapxOhX1LakFiKTO4R0ra2CIMfE=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\nMap.propTypes = DirectionsPropTypes; // export default React.memo(Map)\n\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/LaiOffer/TravelPlannerFE/src/SharedComponents/Map.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","DirectionsService","DirectionsRenderer","POIData","mapStyles","PropTypes","searchByRange","Button","Image","Card","message","libraries","mapContainerStyle","width","height","options","styles","disableDefaultUI","zoomControl","DirectionsPropTypes","shape","container","object","isRequired","Map","initCenter","searchData","pickedPOI","routePoints","mapRef","useRef","selectedPOI","setSelectedPOI","center","setCenter","showNearBy","setShowNearBy","setPOIData","loading","setLoading","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLEMAP_API","response","setResponse","directionReq","setDirectionReq","handleLoad","map","current","handleBoundsChanged","onSelectPOI","onGenerateRoute","poi","lat","lng","directReq","origin","startAddress","destination","endAddress","travelMode","waypoints","poiList","forEach","push","location","stopover","length","getNearbyPOIs","console","log","ne","getBounds","getNorthEast","toJSON","c","getCenter","radius","haversine_distance","then","data","catch","err","error","finally","p1","p2","R","rlat1","Math","PI","rlat2","difflat","difflon","d","asin","sqrt","sin","cos","directionsCallback","useCallback","res","status","directionsRendererOptions","directions","onAddPOItoRoute","POI","url","imageUrl","scaledSize","window","google","maps","Size","poiId","name","paddingTop","paddingBottom","description","propTypes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from \"react\";\r\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, DirectionsService, DirectionsRenderer } from \"@react-google-maps/api\";\r\nimport * as POIData from \"./POI-data-test.json\";\r\nimport mapStyles from \"../styles/mapStyles\";\r\nimport PropTypes from 'prop-types'\r\nimport {searchByRange} from '../Utils/searchUtils';\r\nimport \"../styles/Map.css\"\r\nimport { Button, Image, Card, message } from \"antd\";\r\n\r\n\r\nconst libraries = [\"places\"];\r\nconst mapContainerStyle = {\r\n    // overflow: \"hidden !important\" ,\r\n    // lineHeight: 1.35,\r\n    // whiteSpace: \"nowrap\",\r\n    width: '100vw',\r\n    height: '100%',\r\n};\r\n\r\nconst options = {\r\n    styles: mapStyles,\r\n    disableDefaultUI: true,\r\n    zoomControl: true,\r\n};\r\n\r\nconst DirectionsPropTypes = {\r\n    styles: PropTypes.shape({\r\n        container: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n}\r\n\r\n\r\nfunction Map({initCenter, searchData, pickedPOI, routePoints}) {\r\n\r\n    const mapRef = React.useRef();\r\n    const[selectedPOI, setSelectedPOI] = useState(null);\r\n    const[center, setCenter] = useState();\r\n    const[showNearBy, setShowNearBy] = useState(true);\r\n\r\n    const [POIData, setPOIData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const { isLoaded, loadError } = useLoadScript({\r\n        googleMapsApiKey: process.env.REACT_APP_GOOGLEMAP_API,\r\n        libraries,\r\n    });\r\n\r\n    const [response, setResponse] = useState(null)\r\n    const [directionReq, setDirectionReq]=useState(null);\r\n\r\n\r\n    function handleLoad(map) {\r\n        mapRef.current = map;\r\n    }\r\n    \r\n    function handleBoundsChanged() {\r\n        if (!mapRef.current) return;\r\n        //const newPos = mapRef.current.getCenter().toJSON();\r\n       // setPosition(newPos);\r\n      // setCenter(newPos);\r\n        //console.log(newPos)\r\n       // if(searchData.length !== 0) {\r\n       //     setPOIData(searchData);\r\n       // } else {     \r\n          \r\n      //  if (showNearBy)       \r\n      //      getNearbyPOIs();\r\n        //}\r\n    }\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        if (!center){\r\n            setCenter(initCenter);\r\n        }\r\n\r\n    })\r\n\r\n    /* if picked POI is updated from search results or route drawer\r\n    Centerize that POI and show details\r\n    */\r\n    useEffect(()=>{\r\n        if (pickedPOI) {\r\n            onSelectPOI(pickedPOI);\r\n        }\r\n    }, [pickedPOI])\r\n\r\n    /* if route points is passed in, generate and show route */\r\n    useEffect(()=>{\r\n        if(routePoints) {\r\n            onGenerateRoute(routePoints);\r\n        }\r\n    }, [routePoints])\r\n\r\n    const onSelectPOI = (poi)=> {\r\n        setSelectedPOI(poi);\r\n        setCenter({lat: poi.lat, lng: poi.lng});\r\n    }\r\n\r\n    const onGenerateRoute=(routePoints)=> {\r\n\r\n        const directReq = {\r\n            origin: routePoints.startAddress,\r\n            destination: routePoints.endAddress,\r\n            travelMode: \"DRIVING\",\r\n        }\r\n        const waypoints = [];\r\n        routePoints.poiList.forEach (poi => {\r\n            waypoints.push({\r\n                location: {lat: poi.lat, lng: poi.lng},\r\n                stopover: true\r\n            })\r\n        })\r\n        directReq.waypoints = waypoints;\r\n        setDirectionReq(directReq);\r\n    }\r\n\r\n    useEffect( ()=> {\r\n        if(searchData.length !== 0) {\r\n            setPOIData(searchData);\r\n            setShowNearBy(false);\r\n        } else {         \r\n            setShowNearBy(true);              \r\n            getNearbyPOIs();\r\n        }\r\n        console.log(\"search data changed\")\r\n    },[searchData])\r\n\r\n    const getNearbyPOIs = ()=> {\r\n        if (!mapRef.current) return;\r\n        \r\n        const ne = mapRef.current.getBounds().getNorthEast().toJSON();\r\n        const c = mapRef.current.getCenter().toJSON();\r\n\r\n        const radius = haversine_distance(c,ne);\r\n\r\n        searchByRange(c.lat, c.lng, radius)\r\n            .then((data) => {\r\n                setPOIData(data);\r\n            })\r\n            .catch((err) => {\r\n                message.error(err.message);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function haversine_distance(p1, p2) {\r\n        var R = 6371; // Radius of the Earth in kms\r\n        var rlat1 = p1.lat * (Math.PI/180); // Convert degrees to radians\r\n        var rlat2 = p2.lat * (Math.PI/180); // Convert degrees to radians\r\n        var difflat = rlat2-rlat1; // Radian difference (latitudes)\r\n        var difflon = (p2.lng-p1.lng) * (Math.PI/180); // Radian difference (longitudes)\r\n  \r\n        var d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat/2)*Math.sin(difflat/2)+Math.cos(rlat1)*Math.cos(rlat2)*Math.sin(difflon/2)*Math.sin(difflon/2)));\r\n        return d;\r\n      }\r\n\r\n    const directionsCallback = React.useCallback((res) => {\r\n        console.log(res)\r\n\r\n        if (res !== null) {\r\n            if (res.status === 'OK') {\r\n                setResponse(res)\r\n            } else {\r\n                console.log('response: ', res)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    let directionsRendererOptions = {\r\n        directions: response,\r\n    }\r\n\r\n    const onAddPOItoRoute = (poi)=>{\r\n        console.log(\"onAddPOItoRoute\");\r\n    }\r\n    if (loadError) return \"Error\";\r\n    if (!isLoaded) return \"Loading...\";\r\n\r\n    return (\r\n        <div style={{height: \"inherit\"}}>\r\n            \r\n\r\n            <GoogleMap\r\n                \r\n                mapContainerStyle={mapContainerStyle}\r\n                onBoundsChanged={handleBoundsChanged}\r\n                zoom={13}\r\n                center={center}\r\n                options={options}\r\n                onLoad={handleLoad}\r\n                onTilesLoaded={ ()=>{ if (showNearBy)\r\n                 getNearbyPOIs()}}\r\n\r\n            >\r\n                \r\n                {POIData.map(POI => (\r\n                    <Marker\r\n                        key = {POI.poiId}\r\n                        position = {{\r\n                            lat: POI.lat,\r\n                            lng: POI.lng\r\n                        }}\r\n                        onClick={() => {\r\n                            onSelectPOI(POI);\r\n                        }}\r\n                        icon = {{\r\n                            url: POI.imageUrl,\r\n                            scaledSize: new window.google.maps.Size(50, 50)\r\n                        }}\r\n                    />\r\n                ))}\r\n\r\n                {selectedPOI && (\r\n                    <InfoWindow\r\n                        position = {{\r\n                            lat: selectedPOI.lat,\r\n                            lng: selectedPOI.lng\r\n                        }}\r\n                        onCloseClick={() => {\r\n                            setSelectedPOI(null);\r\n                        }}\r\n                    >\r\n                        <div className=\"info-window\">\r\n                            <Image \r\n                                    src={selectedPOI.imageUrl}                                    \r\n                                    alt={selectedPOI.name}\r\n                                    className=\"info-image\"\r\n                             />\r\n                             <div className=\"card-button\">\r\n                             <Card title ={selectedPOI.name} bodyStyle={{paddingTop: 0, paddingBottom: 0}}>\r\n                                {selectedPOI.description}                                \r\n                             </Card>\r\n                             <Button type=\"primary\" htmlType=\"submit\" onClick={()=>onAddPOItoRoute(selectedPOI)}>\r\n                                Add to Trip\r\n                            </Button>\r\n                             </div>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n\r\n                {directionReq && (\r\n                    <DirectionsService\r\n                        options={directionReq}\r\n                        callback={directionsCallback}\r\n                    />\r\n                )}\r\n\r\n                {response !== null && (\r\n                    <DirectionsRenderer options={directionsRendererOptions} />\r\n                )}\r\n\r\n            </GoogleMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nMap.propTypes = DirectionsPropTypes\r\n// export default React.memo(Map)\r\nexport default Map\r\n"]},"metadata":{},"sourceType":"module"}