{"ast":null,"code":"var _jsxFileName = \"D:\\\\LaiOffer\\\\TravelPlannerFE\\\\src\\\\SharedComponents\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, DirectionsService, DirectionsRenderer } from \"@react-google-maps/api\";\nimport * as POIData from \"./POI-data-test.json\";\nimport mapStyles from \"../styles/mapStyles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '87.2vh'\n};\nconst imageStyle = {\n  alt: \"img\",\n  float: 'left',\n  width: 100\n}; // const textStyle = {\n//     textalign: 'left'\n// }\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst center = {\n  lat: 40.748440,\n  lng: -73.985664\n};\n\nfunction Map() {\n  _s();\n\n  this.state = {\n    response: null,\n    travelMode: 'DRIVING',\n    origin: '',\n    destination: ''\n  };\n  const [selectedPOI, setSelectedPOI] = useState(null);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLEMAP_API,\n    libraries\n  });\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(14);\n  }, []);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap // id=\"map\"\n    , {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 10,\n      center: center,\n      options: options // onClick={onMapClick}\n      // onLoad={onMapLoad}\n      ,\n      children: [POIData.features.map(POI => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: POI.geometry.coordinates[1],\n          lng: POI.geometry.coordinates[0]\n        },\n        onClick: () => {\n          setSelectedPOI(POI);\n        } // icon = {{\n        //     url: \" \",\n        //     scaledSize: new window.google.maps.Size(25, 25)\n        // }}\n\n      }, POI.properties.poiid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)), this.state.destination !== '' && this.state.origin !== '' && /*#__PURE__*/_jsxDEV(DirectionsService // required\n      , {\n        options: {\n          destination: 'new york',\n          origin: 'boston',\n          travelMode: 'DRIVING'\n        } // required\n        ,\n        callback: this.directionsCallback // optional\n        ,\n        onLoad: directionsService => {\n          console.log('DirectionsService onLoad directionsService: ', directionsService);\n        } // optional\n        ,\n        onUnmount: directionsService => {\n          console.log('DirectionsService onUnmount directionsService: ', directionsService);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), this.state.response !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer // required\n      , {\n        options: {\n          directions: this.state.response\n        } // optional\n        ,\n        onLoad: directionsRenderer => {\n          console.log('DirectionsRenderer onLoad directionsRenderer: ', directionsRenderer);\n        } // optional\n        ,\n        onUnmount: directionsRenderer => {\n          console.log('DirectionsRenderer onUnmount directionsRenderer: ', directionsRenderer);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Map, \"4P+yqIEAQhujGO1ArnXQUWV7j4I=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/LaiOffer/TravelPlannerFE/src/SharedComponents/Map.js"],"names":["React","useState","GoogleMap","useLoadScript","Marker","InfoWindow","DirectionsService","DirectionsRenderer","POIData","mapStyles","libraries","mapContainerStyle","width","height","imageStyle","alt","float","options","styles","disableDefaultUI","zoomControl","center","lat","lng","Map","state","response","travelMode","origin","destination","selectedPOI","setSelectedPOI","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLEMAP_API","mapRef","useRef","onMapLoad","useCallback","map","current","panTo","setZoom","features","POI","geometry","coordinates","properties","poiid","directionsCallback","directionsService","console","log","directions","directionsRenderer"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {GoogleMap, useLoadScript, Marker, InfoWindow, DirectionsService, DirectionsRenderer} from \"@react-google-maps/api\";\r\nimport * as POIData from \"./POI-data-test.json\";\r\nimport mapStyles from \"../styles/mapStyles\";\r\n\r\nconst libraries = [\"places\"];\r\nconst mapContainerStyle = {\r\n    width: '100vw',\r\n    height: '87.2vh',\r\n};\r\n\r\nconst imageStyle = {\r\n    alt: \"img\",\r\n    float: 'left',\r\n    width: 100\r\n}\r\n\r\n// const textStyle = {\r\n//     textalign: 'left'\r\n// }\r\nconst options = {\r\n    styles: mapStyles,\r\n    disableDefaultUI: true,\r\n    zoomControl: true,\r\n};\r\nconst center = {\r\n    lat: 40.748440,\r\n    lng: -73.985664,\r\n};\r\n\r\nfunction Map() {\r\n    this.state = {\r\n        response: null,\r\n        travelMode: 'DRIVING',\r\n        origin: '',\r\n        destination: ''\r\n      }\r\n\r\n    const[selectedPOI, setSelectedPOI] = useState(null);\r\n\r\n    const {isLoaded, loadError} = useLoadScript({\r\n        googleMapsApiKey: process.env.REACT_APP_GOOGLEMAP_API,\r\n        libraries,\r\n    });\r\n\r\n    const mapRef = React.useRef();\r\n    const onMapLoad = React.useCallback((map) => {\r\n        mapRef.current = map;\r\n    }, [])\r\n\r\n    const panTo = React.useCallback(({lat, lng}) => {\r\n        mapRef.current.panTo({lat, lng});\r\n        mapRef.current.setZoom(14);\r\n    }, [])\r\n    \r\n    if (loadError) return \"Error\";\r\n    if (!isLoaded) return \"Loading...\";\r\n\r\n    return (\r\n        <div>\r\n            <GoogleMap\r\n                // id=\"map\"\r\n                mapContainerStyle={mapContainerStyle}\r\n                zoom={10}\r\n                center={center}\r\n                options={options}\r\n                // onClick={onMapClick}\r\n                // onLoad={onMapLoad}\r\n            >\r\n                {POIData.features.map(POI => (\r\n                    <Marker\r\n                        key = {POI.properties.poiid}\r\n                        position = {{\r\n                            lat: POI.geometry.coordinates[1],\r\n                            lng: POI.geometry.coordinates[0]\r\n                        }}\r\n                        onClick = {() => {\r\n                            setSelectedPOI(POI);\r\n                        }}\r\n                        // icon = {{\r\n                        //     url: \" \",\r\n                        //     scaledSize: new window.google.maps.Size(25, 25)\r\n                        // }}\r\n                    />\r\n                ))}\r\n\r\n                {/* {selectedPOI && (\r\n                    <InfoWindow\r\n                        position = {{\r\n                            lat: selectedPOI.geometry.coordinates[1],\r\n                            lng: selectedPOI.geometry.coordinates[0]\r\n                        }}\r\n                        onCloseClick = {() => {\r\n                            setSelectedPOI(null);\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            <div >\r\n                                <img \r\n                                    src={selectedPOI.properties.imageUrl}\r\n                                    style = {imageStyle}\r\n                                />\r\n                            </div>\r\n                            <div >\r\n                                <b>{selectedPOI.properties.NAME}</b>\r\n                                <br/>\r\n                                Address: {selectedPOI.properties.ADDRESS}\r\n                                <br/>\r\n                                Description: {selectedPOI.properties.description}\r\n                            </div>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )} */}\r\n\r\n                {(\r\n                    this.state.destination !== '' &&\r\n                    this.state.origin !== ''\r\n                ) && (\r\n                    <DirectionsService\r\n                    // required\r\n                    options={{\r\n                        destination: 'new york',\r\n                        origin: 'boston',\r\n                        travelMode: 'DRIVING'\r\n                    }}\r\n                    // required\r\n                    callback={this.directionsCallback}\r\n                    // optional\r\n                    onLoad={directionsService => {\r\n                        console.log('DirectionsService onLoad directionsService: ', directionsService)\r\n                    }}\r\n                    // optional\r\n                    onUnmount={directionsService => {\r\n                        console.log('DirectionsService onUnmount directionsService: ', directionsService)\r\n                    }}\r\n                    />\r\n                )\r\n                }\r\n\r\n                {\r\n                this.state.response !== null && (\r\n                    <DirectionsRenderer\r\n                    // required\r\n                    options={{\r\n                        directions: this.state.response\r\n                    }}\r\n                    // optional\r\n                    onLoad={directionsRenderer => {\r\n                        console.log('DirectionsRenderer onLoad directionsRenderer: ', directionsRenderer)\r\n                    }}\r\n                    // optional\r\n                    onUnmount={directionsRenderer => {\r\n                        console.log('DirectionsRenderer onUnmount directionsRenderer: ', directionsRenderer)\r\n                    }}\r\n                    />\r\n                )\r\n                }\r\n            </GoogleMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n"]},"metadata":{},"sourceType":"module"}